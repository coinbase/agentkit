Metadata-Version: 2.2
Name: artist_manager_agent
Version: 0.1.0
Summary: A Telegram bot for managing artist careers
Home-page: https://github.com/yourusername/artistmanager00
Author: Your Name
Author-email: your.email@example.com
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: End Users/Desktop
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
License-File: LICENSE.md
Requires-Dist: python-telegram-bot[job-queue]>=20.0
Requires-Dist: pydantic>=2.0
Requires-Dist: cryptography>=41.0.0
Requires-Dist: langchain>=0.1.0
Requires-Dist: langchain-openai>=0.0.3
Requires-Dist: openai>=1.6.1
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: urllib3<2.0.0
Requires-Dist: sqlalchemy>=2.0.23
Requires-Dist: aiosqlite>=0.19.0
Requires-Dist: supabase>=2.0.0
Requires-Dist: psycopg2-binary>=2.9.9
Requires-Dist: aiohttp>=3.9.0
Requires-Dist: asyncio>=3.4.3
Requires-Dist: web3>=6.11.3
Requires-Dist: eth-account>=0.9.0
Requires-Dist: eth-utils>=2.3.1
Requires-Dist: eth-typing>=3.5.1
Requires-Dist: eth-hash>=0.5.2
Requires-Dist: eth-abi>=4.2.1
Requires-Dist: psutil>=5.9.6
Requires-Dist: prometheus-client>=0.19.0
Requires-Dist: structlog>=23.2.0
Requires-Dist: pytest>=7.4.3
Requires-Dist: pytest-asyncio>=0.23.2
Requires-Dist: pytest-cov>=4.1.0
Requires-Dist: pytest-mock>=3.10.0
Requires-Dist: black>=23.11.0
Requires-Dist: isort>=5.12.0
Requires-Dist: mypy>=1.7.1
Requires-Dist: ruff>=0.1.6
Requires-Dist: flake8>=6.0.0
Requires-Dist: types-python-dateutil>=2.8.2
Requires-Dist: types-requests>=2.31.0
Requires-Dist: mkdocs>=1.4.0
Requires-Dist: mkdocs-material>=9.1.0
Requires-Dist: mkdocstrings>=0.22.0
Requires-Dist: requests>=2.31.0
Requires-Dist: aiofiles>=23.2.1
Requires-Dist: aiodns>=3.1.1
Requires-Dist: cchardet>=2.1.7
Requires-Dist: ujson>=5.9.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Artist Manager Bot

A Telegram bot designed to help artists manage their career, social media presence, and streaming profiles.

## Setup

1. Clone the repository:
```bash
git clone https://github.com/yourusername/artistmanager00.git
cd artistmanager00
```

2. Create and activate a virtual environment:
```bash
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

3. Install dependencies:
```bash
pip install -r requirements.txt
```

4. Create a `.env` file with your credentials:
```
TELEGRAM_BOT_TOKEN=your_bot_token
OPENAI_API_KEY=your_openai_api_key
```

5. Run the bot:
```bash
python -m artist_manager_agent
```

## Features

- Personalized onboarding process
- Career stage assessment and guidance
- Social media profile management
- Streaming platform integration
- Goal setting and tracking

## Development

To install in development mode:
```bash
pip install -e .
```

## Vercel Deployment

1. Install the Vercel CLI:
```bash
npm i -g vercel
```

2. Login to Vercel:
```bash
vercel login
```

3. Deploy to Vercel:
```bash
vercel
```

4. Set up environment variables in Vercel:
- Go to your project settings
- Add the following environment variables:
  - `TELEGRAM_BOT_TOKEN`
  - `OPENAI_API_KEY`
  - `OPENAI_MODEL`
  - `DATABASE_URL`
  - `LOG_LEVEL`

5. Set up the Telegram webhook:
```bash
curl "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/setWebhook?url=https://your-vercel-url.vercel.app/api/vercel"
```

## Project Structure

- `artist_manager_agent/` - Main bot code
  - `bot.py` - Bot initialization and core logic
  - `onboarding.py` - Onboarding wizard
  - `models.py` - Data models
  - `agent.py` - AI agent logic
  - `blockchain.py` - Blockchain integration
  - `log.py` - Logging utilities
- `api/` - Vercel serverless functions
- `tests/` - Test suite
- `deploy.py` - Local deployment script
- `deploy_prod.py` - Production deployment script

## Contributing

1. Fork the repository
2. Create a feature branch
3. Commit your changes
4. Push to the branch
5. Create a Pull Request

## License

MIT License - see LICENSE file for details
