# {{name_pascal}} Action Provider

This directory contains the **{{name_pascal}}ActionProvider** implementation, which provides actions for {{name}} operations.

## Overview

The {{name_pascal}}ActionProvider is designed to {% if wallet_provider %}work with {{wallet_provider}} for blockchain interactions{% else %}provide blockchain-agnostic operations{% endif %}. It provides a set of actions that enable [describe the main purpose/functionality].

## Directory Structure

```
{{name}}/
├── {{name}}ActionProvider.ts     # Main provider implementation
├── schemas.ts                    # Action schemas and types
├── index.ts                      # Package exports
└── README.md                     # Documentation (this file)
```

## Test Structure

```
{{name}}/
└── {{name}}ActionProvider.test.ts  # Provider test suite
```

## Actions

### Example Action
- `example-action`: Template action implementation
  - **Purpose**: Demonstrates the basic structure of an action
  - **Input**:
    - `fieldName` (string): A descriptive name for the field (1-100 chars)
    - `amount` (string): The amount as a decimal string (e.g. "1.5")
    - `optionalField` (string, optional): Optional parameter example
  - **Output**: String describing the action result
  - **Example**:
    ```typescript
    const result = await provider.exampleAction({% if wallet_provider %}walletProvider, {% endif %}{
      fieldName: "test",
      amount: "1.0"
    });
    ```

## Implementation Details

### Network Support
{% if not protocol_family %}
This provider supports all blockchain networks.
{% elif networkIds|length == 0 %}
This provider supports all {{protocol_family}} networks.
{% else %}
This provider supports {{protocol_family}} networks: {% for networkId in networkIds %}{{networkId}}{% if not loop.last %}, {% endif %}{% endfor %}.
{% endif %}

{% if wallet_provider %}
### Wallet Provider Integration
This provider is specifically designed to work with {{wallet_provider}}. Key integration points:
- Network compatibility checks
- Transaction signing and execution
- Balance and account management
{% endif %}

## Adding New Actions

To add new actions:

1. Define the schema in `schemas.ts`:
   ```typescript
   export const NewActionSchema = z.object({
     // Define your action's parameters
   });
   ```

2. Implement the action in `{{name}}ActionProvider.ts`:
   ```typescript
   @CreateAction({
     name: "new-action",
     description: "Description of what your action does",
     schema: NewActionSchema,
   })
   async newAction(
     {% if wallet_provider %}walletProvider: {{wallet_provider}}, {% endif %}
     args: z.infer<typeof NewActionSchema>
   ): Promise<string> {
     // Implement your action logic
   }
   ```

## Testing

When implementing new actions, ensure to:
1. Add unit tests for schema validations
2. Add integration tests for action execution
3. Test network support

## Dependencies
- AgentKit core library
{% if wallet_provider %}
- {{wallet_provider}} for blockchain interactions
{% if wallet_provider == "EvmWalletProvider" %}
- EVM-specific dependencies (e.g., viem)
{% elif wallet_provider == "SvmWalletProvider" %}
- Solana-specific dependencies (e.g., @solana/web3.js)
{% endif %}
{% endif %}

## Notes
- Add any specific considerations for this action provider
- Document any prerequisites or setup requirements
- Include relevant external documentation links

## Contributing
Interested in contributing? Check out:
- [Contribution Guide](https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING.md)
- [Discord Community](https://discord.gg/CDP) 