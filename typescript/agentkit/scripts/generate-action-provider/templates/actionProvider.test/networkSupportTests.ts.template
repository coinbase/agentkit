describe("network support", () => {
  {% if not protocol_family %}
  it("should support all network types", () => {
    expect(
      provider.supportsNetwork({
        networkId: "any-network",
        protocolFamily: "any-protocol",
        chainId: "any-chain-id",
      } as Network),
    ).toBe(true);
  });
  {% endif %}
  
  {% if protocol_family and not networkIds|length %}
  it("should support the protocol family", () => {
    expect(
      provider.supportsNetwork({
        protocolFamily: "{{protocol_family}}",
      }),
    ).toBe(true);
  });

  it("should not support other protocol families", () => {
    expect(
      provider.supportsNetwork({
        protocolFamily: "other-protocol-family",
      }),
    ).toBe(false);
  });
  {% endif %}
  
  {% if protocol_family and networkIds|length %}
  it("should support configured networks", () => {
    {% for networkId in networkIds %}
    {% if protocol_family == "evm" %}
    {
      expect(
        provider.supportsNetwork({
          networkId: "{{networkId}}",
          protocolFamily: "{{protocol_family}}",
          chainId: CHAIN_ID_TO_NETWORK_ID["{{networkId}}"],
        }),
      ).toBe(true);
    }
    {% elif protocol_family == "svm" %}
    {
      const network = [
        SOLANA_MAINNET_NETWORK,
        SOLANA_TESTNET_NETWORK,
        SOLANA_DEVNET_NETWORK,
      ].find(n => n.networkId === "{{networkId}}");
      if (!network) {
        throw new Error("Network not found: {{networkId}}");
      }
      expect(provider.supportsNetwork(network)).toBe(true);
    }
    {% endif %}
    {% endfor %}
  });

  it("should not support other networks", () => {
    expect(
      provider.supportsNetwork({
        networkId: "other-network-id",
        protocolFamily: "{{protocol_family}}",
      }),
    ).toBe(false);
  });
  {% endif %}
  
  {% if protocol_family %}
  it("should handle invalid network objects", () => {
    expect(provider.supportsNetwork({} as Network)).toBe(false);
    {% if networkIds|length %}
    expect(
      provider.supportsNetwork({
        protocolFamily: "{{protocol_family}}",
      } as Network),
    ).toBe(false);
    {% endif %}
  });
  {% endif %}
}); 