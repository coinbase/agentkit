# {{name_pascal}} Action Provider

This directory contains the **{{name_pascal}}ActionProvider** implementation, which provides actions for {{name}} operations.

## Overview

The {{name_pascal}}ActionProvider is designed to work with the {{wallet_provider}} for blockchain interactions. It provides a set of actions that enable [describe the main purpose/functionality].

## Directory Structure

```
{{name}}/
├── {{name}}ActionProvider.ts    # Main provider implementation
├── schemas.ts                   # Action schemas and types
└── README.md                    # Documentation (this file)
```

## Actions

### Example Action
- `example-action`: Template action implementation
  - **Purpose**: Demonstrates the basic structure of an action
  - **Input**:
    - `fieldName` (string): A descriptive name for the field
    - `amount` (number): The amount to use in the action
    - `optionalField` (string, optional): Optional parameter example
    - `enumField` ("option1" | "option2" | "option3"): Constrained choices
  - **Output**: String describing the action result
  - **Example**:
    ```typescript
    const result = await provider.exampleAction(walletProvider, {
      fieldName: "test",
      amount: 1.0,
      enumField: "option1"
    });
    ```

## Implementation Details

### Network Support
The {{name_pascal}} Action Provider supports networks based on the {{wallet_provider}} requirements:
{% if wallet_provider == "EvmWalletProvider" %}
- Supports EVM-compatible networks (protocol_family: "evm")
{% elif wallet_provider == "SvmWalletProvider" %}
- Supports Solana networks (protocol_family: "svm")
{% elif wallet_provider == "CdpWalletProvider" or wallet_provider == "EthAccountWalletProvider" %}
- Supports EVM-compatible networks (protocol_family: "evm")
{% else %}
- Supports all networks (generic wallet provider)
{% endif %}

### Wallet Provider Integration
This provider is specifically designed to work with {{wallet_provider}}. Key integration points:
- Network compatibility checks
- Transaction signing and execution
- Balance and account management

## Adding New Actions

To add new actions:

1. Define the schema in `schemas.ts`:
   ```typescript
   export const NewActionSchema = z.object({
     // Define your action's parameters
   });
   ```

2. Implement the action in `{{name}}ActionProvider.ts`:
   ```typescript
   @CreateAction({
     name: "new-action",
     description: "Description of what your action does",
     schema: NewActionSchema,
   })
   async newAction(
     walletProvider: {{wallet_provider}}, 
     args: z.infer<typeof NewActionSchema>
   ): Promise<string> {
     // Implement your action logic
   }
   ```

## Testing

When implementing new actions, ensure to:
1. Add unit tests for schema validations
2. Add integration tests for action execution
3. Test network support

## Dependencies
- AgentKit core library
- {{wallet_provider}} for blockchain interactions
{% if wallet_provider == "EvmWalletProvider" %}
- EVM-specific dependencies (e.g., ethers.js, web3.js)
{% elif wallet_provider == "SvmWalletProvider" %}
- Solana-specific dependencies (e.g., @solana/web3.js)
{% endif %}

## Notes
- Add any specific considerations for this action provider
- Document any prerequisites or setup requirements
- Include relevant external documentation links

## Contributing
Interested in contributing? Check out:
- [Contribution Guide](https://github.com/coinbase/agentkit/blob/main/CONTRIBUTING.md)
- [Discord Community](https://discord.gg/CDP) 