"""Schemas for {{ name }} Action Provider.

This file contains the Pydantic schemas that define the input types
for the {{ name }} action provider's actions.

@module {{ name }}/schemas
"""

from enum import Enum

from pydantic import BaseModel, Field, field_validator


class ExampleEnum(str, Enum):
    """Example enum for action parameters."""

    OPTION1 = "option1"
    OPTION2 = "option2"
    OPTION3 = "option3"


class ExampleActionSchema(BaseModel):
    """Example action schema demonstrating various field types and validations.

    Replace or modify this with your actual action schemas.
    """

    field_name: str = Field(
        ...,
        min_length=1,
        max_length=100,
        description="A descriptive name for the field",
    )

    amount: str = Field(
        ...,
        pattern=r"^\d*\.?\d+$",
        description="The amount to use in the action (as a decimal string, e.g. '0.01')",
    )

    optional_field: str | None = Field(
        None,
        description="Optional parameter example",
    )

    enum_field: ExampleEnum = Field(
        ...,
        description="Constrained choices example",
    )

    @field_validator("amount")
    @classmethod
    def validate_amount(cls, v: str) -> str:
        """Validate that amount is a valid decimal number."""
        if not v:
            raise ValueError("Amount must not be empty")
        try:
            float(v)
        except ValueError as err:
            raise ValueError("Amount must be a valid decimal number") from err
        return v
